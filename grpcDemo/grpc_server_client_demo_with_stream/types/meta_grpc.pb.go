// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc_server_client_demo_with_stream/proto/meta.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCDemoClient is the client API for RPCDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCDemoClient interface {
	Unary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ResponseStreaming(ctx context.Context, in *Request, opts ...grpc.CallOption) (RPCDemo_ResponseStreamingClient, error)
	ResquestStreaming(ctx context.Context, opts ...grpc.CallOption) (RPCDemo_ResquestStreamingClient, error)
	ResquestStreamingAndResponseStreaming(ctx context.Context, opts ...grpc.CallOption) (RPCDemo_ResquestStreamingAndResponseStreamingClient, error)
}

type rPCDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCDemoClient(cc grpc.ClientConnInterface) RPCDemoClient {
	return &rPCDemoClient{cc}
}

func (c *rPCDemoClient) Unary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/meta.RPCDemo/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDemoClient) ResponseStreaming(ctx context.Context, in *Request, opts ...grpc.CallOption) (RPCDemo_ResponseStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPCDemo_ServiceDesc.Streams[0], "/meta.RPCDemo/ResponseStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCDemoResponseStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCDemo_ResponseStreamingClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type rPCDemoResponseStreamingClient struct {
	grpc.ClientStream
}

func (x *rPCDemoResponseStreamingClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCDemoClient) ResquestStreaming(ctx context.Context, opts ...grpc.CallOption) (RPCDemo_ResquestStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPCDemo_ServiceDesc.Streams[1], "/meta.RPCDemo/ResquestStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCDemoResquestStreamingClient{stream}
	return x, nil
}

type RPCDemo_ResquestStreamingClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type rPCDemoResquestStreamingClient struct {
	grpc.ClientStream
}

func (x *rPCDemoResquestStreamingClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCDemoResquestStreamingClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCDemoClient) ResquestStreamingAndResponseStreaming(ctx context.Context, opts ...grpc.CallOption) (RPCDemo_ResquestStreamingAndResponseStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPCDemo_ServiceDesc.Streams[2], "/meta.RPCDemo/ResquestStreamingAndResponseStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCDemoResquestStreamingAndResponseStreamingClient{stream}
	return x, nil
}

type RPCDemo_ResquestStreamingAndResponseStreamingClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type rPCDemoResquestStreamingAndResponseStreamingClient struct {
	grpc.ClientStream
}

func (x *rPCDemoResquestStreamingAndResponseStreamingClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCDemoResquestStreamingAndResponseStreamingClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCDemoServer is the server API for RPCDemo service.
// All implementations must embed UnimplementedRPCDemoServer
// for forward compatibility
type RPCDemoServer interface {
	Unary(context.Context, *Request) (*Response, error)
	ResponseStreaming(*Request, RPCDemo_ResponseStreamingServer) error
	ResquestStreaming(RPCDemo_ResquestStreamingServer) error
	ResquestStreamingAndResponseStreaming(RPCDemo_ResquestStreamingAndResponseStreamingServer) error
	mustEmbedUnimplementedRPCDemoServer()
}

// UnimplementedRPCDemoServer must be embedded to have forward compatible implementations.
type UnimplementedRPCDemoServer struct {
}

func (UnimplementedRPCDemoServer) Unary(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedRPCDemoServer) ResponseStreaming(*Request, RPCDemo_ResponseStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ResponseStreaming not implemented")
}
func (UnimplementedRPCDemoServer) ResquestStreaming(RPCDemo_ResquestStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ResquestStreaming not implemented")
}
func (UnimplementedRPCDemoServer) ResquestStreamingAndResponseStreaming(RPCDemo_ResquestStreamingAndResponseStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ResquestStreamingAndResponseStreaming not implemented")
}
func (UnimplementedRPCDemoServer) mustEmbedUnimplementedRPCDemoServer() {}

// UnsafeRPCDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCDemoServer will
// result in compilation errors.
type UnsafeRPCDemoServer interface {
	mustEmbedUnimplementedRPCDemoServer()
}

func RegisterRPCDemoServer(s grpc.ServiceRegistrar, srv RPCDemoServer) {
	s.RegisterService(&RPCDemo_ServiceDesc, srv)
}

func _RPCDemo_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDemoServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.RPCDemo/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDemoServer).Unary(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDemo_ResponseStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCDemoServer).ResponseStreaming(m, &rPCDemoResponseStreamingServer{stream})
}

type RPCDemo_ResponseStreamingServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type rPCDemoResponseStreamingServer struct {
	grpc.ServerStream
}

func (x *rPCDemoResponseStreamingServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _RPCDemo_ResquestStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCDemoServer).ResquestStreaming(&rPCDemoResquestStreamingServer{stream})
}

type RPCDemo_ResquestStreamingServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type rPCDemoResquestStreamingServer struct {
	grpc.ServerStream
}

func (x *rPCDemoResquestStreamingServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCDemoResquestStreamingServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPCDemo_ResquestStreamingAndResponseStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCDemoServer).ResquestStreamingAndResponseStreaming(&rPCDemoResquestStreamingAndResponseStreamingServer{stream})
}

type RPCDemo_ResquestStreamingAndResponseStreamingServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type rPCDemoResquestStreamingAndResponseStreamingServer struct {
	grpc.ServerStream
}

func (x *rPCDemoResquestStreamingAndResponseStreamingServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCDemoResquestStreamingAndResponseStreamingServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCDemo_ServiceDesc is the grpc.ServiceDesc for RPCDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta.RPCDemo",
	HandlerType: (*RPCDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _RPCDemo_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResponseStreaming",
			Handler:       _RPCDemo_ResponseStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResquestStreaming",
			Handler:       _RPCDemo_ResquestStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ResquestStreamingAndResponseStreaming",
			Handler:       _RPCDemo_ResquestStreamingAndResponseStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_server_client_demo_with_stream/proto/meta.proto",
}
